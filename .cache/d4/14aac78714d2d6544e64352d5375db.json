{"id":"../node_modules/@redis/graph/dist/graph.js","dependencies":[{"name":"/workspaces/My-Game/package.json","includedInParent":true,"mtime":1738860372634},{"name":"/workspaces/My-Game/node_modules/@redis/graph/package.json","includedInParent":true,"mtime":1738860341630}],"generated":{"js":"\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Graph_instances, _Graph_client, _Graph_name, _Graph_metadata, _Graph_setMetadataPromise, _Graph_updateMetadata, _Graph_setMetadata, _Graph_cleanMetadataArray, _Graph_getMetadata, _Graph_getMetadataAsync, _Graph_parseReply, _Graph_parseValue, _Graph_parseEdge, _Graph_parseNode, _Graph_parseProperties;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// https://github.com/RedisGraph/RedisGraph/blob/master/src/resultset/formatters/resultset_formatter.h#L20\nvar GraphValueTypes;\n(function (GraphValueTypes) {\n    GraphValueTypes[GraphValueTypes[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    GraphValueTypes[GraphValueTypes[\"NULL\"] = 1] = \"NULL\";\n    GraphValueTypes[GraphValueTypes[\"STRING\"] = 2] = \"STRING\";\n    GraphValueTypes[GraphValueTypes[\"INTEGER\"] = 3] = \"INTEGER\";\n    GraphValueTypes[GraphValueTypes[\"BOOLEAN\"] = 4] = \"BOOLEAN\";\n    GraphValueTypes[GraphValueTypes[\"DOUBLE\"] = 5] = \"DOUBLE\";\n    GraphValueTypes[GraphValueTypes[\"ARRAY\"] = 6] = \"ARRAY\";\n    GraphValueTypes[GraphValueTypes[\"EDGE\"] = 7] = \"EDGE\";\n    GraphValueTypes[GraphValueTypes[\"NODE\"] = 8] = \"NODE\";\n    GraphValueTypes[GraphValueTypes[\"PATH\"] = 9] = \"PATH\";\n    GraphValueTypes[GraphValueTypes[\"MAP\"] = 10] = \"MAP\";\n    GraphValueTypes[GraphValueTypes[\"POINT\"] = 11] = \"POINT\";\n})(GraphValueTypes || (GraphValueTypes = {}));\nclass Graph {\n    constructor(client, name) {\n        _Graph_instances.add(this);\n        _Graph_client.set(this, void 0);\n        _Graph_name.set(this, void 0);\n        _Graph_metadata.set(this, void 0);\n        _Graph_setMetadataPromise.set(this, void 0);\n        __classPrivateFieldSet(this, _Graph_client, client, \"f\");\n        __classPrivateFieldSet(this, _Graph_name, name, \"f\");\n    }\n    async query(query, options) {\n        return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, \"f\").graph.query(__classPrivateFieldGet(this, _Graph_name, \"f\"), query, options, true));\n    }\n    async roQuery(query, options) {\n        return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), query, options, true));\n    }\n}\n_Graph_client = new WeakMap(), _Graph_name = new WeakMap(), _Graph_metadata = new WeakMap(), _Graph_setMetadataPromise = new WeakMap(), _Graph_instances = new WeakSet(), _Graph_updateMetadata = function _Graph_updateMetadata() {\n    __classPrivateFieldSet(this, _Graph_setMetadataPromise, __classPrivateFieldGet(this, _Graph_setMetadataPromise, \"f\") ?? __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_setMetadata).call(this)\n        .finally(() => __classPrivateFieldSet(this, _Graph_setMetadataPromise, undefined, \"f\")), \"f\");\n    return __classPrivateFieldGet(this, _Graph_setMetadataPromise, \"f\");\n}, _Graph_setMetadata = \n// DO NOT use directly, use #updateMetadata instead\nasync function _Graph_setMetadata() {\n    const [labels, relationshipTypes, propertyKeys] = await Promise.all([\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.labels()'),\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.relationshipTypes()'),\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.propertyKeys()')\n    ]);\n    __classPrivateFieldSet(this, _Graph_metadata, {\n        labels: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, labels.data),\n        relationshipTypes: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, relationshipTypes.data),\n        propertyKeys: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, propertyKeys.data)\n    }, \"f\");\n    return __classPrivateFieldGet(this, _Graph_metadata, \"f\");\n}, _Graph_cleanMetadataArray = function _Graph_cleanMetadataArray(arr) {\n    return arr.map(([value]) => value);\n}, _Graph_getMetadata = function _Graph_getMetadata(key, id) {\n    return __classPrivateFieldGet(this, _Graph_metadata, \"f\")?.[key][id] ?? __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadataAsync).call(this, key, id);\n}, _Graph_getMetadataAsync = \n// DO NOT use directly, use #getMetadata instead\nasync function _Graph_getMetadataAsync(key, id) {\n    const value = (await __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_updateMetadata).call(this))[key][id];\n    if (value === undefined)\n        throw new Error(`Cannot find value from ${key}[${id}]`);\n    return value;\n}, _Graph_parseReply = async function _Graph_parseReply(reply) {\n    if (!reply.data)\n        return reply;\n    const promises = [], parsed = {\n        metadata: reply.metadata,\n        data: reply.data.map((row) => {\n            const data = {};\n            for (let i = 0; i < row.length; i++) {\n                data[reply.headers[i][1]] = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, row[i], promises);\n            }\n            return data;\n        })\n    };\n    if (promises.length)\n        await Promise.all(promises);\n    return parsed;\n}, _Graph_parseValue = function _Graph_parseValue([valueType, value], promises) {\n    switch (valueType) {\n        case GraphValueTypes.NULL:\n            return null;\n        case GraphValueTypes.STRING:\n        case GraphValueTypes.INTEGER:\n            return value;\n        case GraphValueTypes.BOOLEAN:\n            return value === 'true';\n        case GraphValueTypes.DOUBLE:\n            return parseFloat(value);\n        case GraphValueTypes.ARRAY:\n            return value.map(x => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, x, promises));\n        case GraphValueTypes.EDGE:\n            return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseEdge).call(this, value, promises);\n        case GraphValueTypes.NODE:\n            return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseNode).call(this, value, promises);\n        case GraphValueTypes.PATH:\n            return {\n                nodes: value[0][1].map(([, node]) => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseNode).call(this, node, promises)),\n                edges: value[1][1].map(([, edge]) => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseEdge).call(this, edge, promises))\n            };\n        case GraphValueTypes.MAP:\n            const map = {};\n            for (let i = 0; i < value.length; i++) {\n                map[value[i++]] = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, value[i], promises);\n            }\n            return map;\n        case GraphValueTypes.POINT:\n            return {\n                latitude: parseFloat(value[0]),\n                longitude: parseFloat(value[1])\n            };\n        default:\n            throw new Error(`unknown scalar type: ${valueType}`);\n    }\n}, _Graph_parseEdge = function _Graph_parseEdge([id, relationshipTypeId, sourceId, destinationId, properties], promises) {\n    const edge = {\n        id,\n        sourceId,\n        destinationId,\n        properties: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseProperties).call(this, properties, promises)\n    };\n    const relationshipType = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'relationshipTypes', relationshipTypeId);\n    if (relationshipType instanceof Promise) {\n        promises.push(relationshipType.then(value => edge.relationshipType = value));\n    }\n    else {\n        edge.relationshipType = relationshipType;\n    }\n    return edge;\n}, _Graph_parseNode = function _Graph_parseNode([id, labelIds, properties], promises) {\n    const labels = new Array(labelIds.length);\n    for (let i = 0; i < labelIds.length; i++) {\n        const value = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'labels', labelIds[i]);\n        if (value instanceof Promise) {\n            promises.push(value.then(value => labels[i] = value));\n        }\n        else {\n            labels[i] = value;\n        }\n    }\n    return {\n        id,\n        labels,\n        properties: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseProperties).call(this, properties, promises)\n    };\n}, _Graph_parseProperties = function _Graph_parseProperties(raw, promises) {\n    const parsed = {};\n    for (const [id, type, value] of raw) {\n        const parsedValue = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, [type, value], promises), key = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'propertyKeys', id);\n        if (key instanceof Promise) {\n            promises.push(key.then(key => parsed[key] = parsedValue));\n        }\n        else {\n            parsed[key] = parsedValue;\n        }\n    }\n    return parsed;\n};\nexports.default = Graph;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/@redis/graph/dist/graph.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}}],"sources":{"../node_modules/@redis/graph/dist/graph.js":"\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Graph_instances, _Graph_client, _Graph_name, _Graph_metadata, _Graph_setMetadataPromise, _Graph_updateMetadata, _Graph_setMetadata, _Graph_cleanMetadataArray, _Graph_getMetadata, _Graph_getMetadataAsync, _Graph_parseReply, _Graph_parseValue, _Graph_parseEdge, _Graph_parseNode, _Graph_parseProperties;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// https://github.com/RedisGraph/RedisGraph/blob/master/src/resultset/formatters/resultset_formatter.h#L20\nvar GraphValueTypes;\n(function (GraphValueTypes) {\n    GraphValueTypes[GraphValueTypes[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    GraphValueTypes[GraphValueTypes[\"NULL\"] = 1] = \"NULL\";\n    GraphValueTypes[GraphValueTypes[\"STRING\"] = 2] = \"STRING\";\n    GraphValueTypes[GraphValueTypes[\"INTEGER\"] = 3] = \"INTEGER\";\n    GraphValueTypes[GraphValueTypes[\"BOOLEAN\"] = 4] = \"BOOLEAN\";\n    GraphValueTypes[GraphValueTypes[\"DOUBLE\"] = 5] = \"DOUBLE\";\n    GraphValueTypes[GraphValueTypes[\"ARRAY\"] = 6] = \"ARRAY\";\n    GraphValueTypes[GraphValueTypes[\"EDGE\"] = 7] = \"EDGE\";\n    GraphValueTypes[GraphValueTypes[\"NODE\"] = 8] = \"NODE\";\n    GraphValueTypes[GraphValueTypes[\"PATH\"] = 9] = \"PATH\";\n    GraphValueTypes[GraphValueTypes[\"MAP\"] = 10] = \"MAP\";\n    GraphValueTypes[GraphValueTypes[\"POINT\"] = 11] = \"POINT\";\n})(GraphValueTypes || (GraphValueTypes = {}));\nclass Graph {\n    constructor(client, name) {\n        _Graph_instances.add(this);\n        _Graph_client.set(this, void 0);\n        _Graph_name.set(this, void 0);\n        _Graph_metadata.set(this, void 0);\n        _Graph_setMetadataPromise.set(this, void 0);\n        __classPrivateFieldSet(this, _Graph_client, client, \"f\");\n        __classPrivateFieldSet(this, _Graph_name, name, \"f\");\n    }\n    async query(query, options) {\n        return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, \"f\").graph.query(__classPrivateFieldGet(this, _Graph_name, \"f\"), query, options, true));\n    }\n    async roQuery(query, options) {\n        return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), query, options, true));\n    }\n}\n_Graph_client = new WeakMap(), _Graph_name = new WeakMap(), _Graph_metadata = new WeakMap(), _Graph_setMetadataPromise = new WeakMap(), _Graph_instances = new WeakSet(), _Graph_updateMetadata = function _Graph_updateMetadata() {\n    __classPrivateFieldSet(this, _Graph_setMetadataPromise, __classPrivateFieldGet(this, _Graph_setMetadataPromise, \"f\") ?? __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_setMetadata).call(this)\n        .finally(() => __classPrivateFieldSet(this, _Graph_setMetadataPromise, undefined, \"f\")), \"f\");\n    return __classPrivateFieldGet(this, _Graph_setMetadataPromise, \"f\");\n}, _Graph_setMetadata = \n// DO NOT use directly, use #updateMetadata instead\nasync function _Graph_setMetadata() {\n    const [labels, relationshipTypes, propertyKeys] = await Promise.all([\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.labels()'),\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.relationshipTypes()'),\n        __classPrivateFieldGet(this, _Graph_client, \"f\").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, \"f\"), 'CALL db.propertyKeys()')\n    ]);\n    __classPrivateFieldSet(this, _Graph_metadata, {\n        labels: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, labels.data),\n        relationshipTypes: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, relationshipTypes.data),\n        propertyKeys: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_cleanMetadataArray).call(this, propertyKeys.data)\n    }, \"f\");\n    return __classPrivateFieldGet(this, _Graph_metadata, \"f\");\n}, _Graph_cleanMetadataArray = function _Graph_cleanMetadataArray(arr) {\n    return arr.map(([value]) => value);\n}, _Graph_getMetadata = function _Graph_getMetadata(key, id) {\n    return __classPrivateFieldGet(this, _Graph_metadata, \"f\")?.[key][id] ?? __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadataAsync).call(this, key, id);\n}, _Graph_getMetadataAsync = \n// DO NOT use directly, use #getMetadata instead\nasync function _Graph_getMetadataAsync(key, id) {\n    const value = (await __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_updateMetadata).call(this))[key][id];\n    if (value === undefined)\n        throw new Error(`Cannot find value from ${key}[${id}]`);\n    return value;\n}, _Graph_parseReply = async function _Graph_parseReply(reply) {\n    if (!reply.data)\n        return reply;\n    const promises = [], parsed = {\n        metadata: reply.metadata,\n        data: reply.data.map((row) => {\n            const data = {};\n            for (let i = 0; i < row.length; i++) {\n                data[reply.headers[i][1]] = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, row[i], promises);\n            }\n            return data;\n        })\n    };\n    if (promises.length)\n        await Promise.all(promises);\n    return parsed;\n}, _Graph_parseValue = function _Graph_parseValue([valueType, value], promises) {\n    switch (valueType) {\n        case GraphValueTypes.NULL:\n            return null;\n        case GraphValueTypes.STRING:\n        case GraphValueTypes.INTEGER:\n            return value;\n        case GraphValueTypes.BOOLEAN:\n            return value === 'true';\n        case GraphValueTypes.DOUBLE:\n            return parseFloat(value);\n        case GraphValueTypes.ARRAY:\n            return value.map(x => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, x, promises));\n        case GraphValueTypes.EDGE:\n            return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseEdge).call(this, value, promises);\n        case GraphValueTypes.NODE:\n            return __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseNode).call(this, value, promises);\n        case GraphValueTypes.PATH:\n            return {\n                nodes: value[0][1].map(([, node]) => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseNode).call(this, node, promises)),\n                edges: value[1][1].map(([, edge]) => __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseEdge).call(this, edge, promises))\n            };\n        case GraphValueTypes.MAP:\n            const map = {};\n            for (let i = 0; i < value.length; i++) {\n                map[value[i++]] = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, value[i], promises);\n            }\n            return map;\n        case GraphValueTypes.POINT:\n            return {\n                latitude: parseFloat(value[0]),\n                longitude: parseFloat(value[1])\n            };\n        default:\n            throw new Error(`unknown scalar type: ${valueType}`);\n    }\n}, _Graph_parseEdge = function _Graph_parseEdge([id, relationshipTypeId, sourceId, destinationId, properties], promises) {\n    const edge = {\n        id,\n        sourceId,\n        destinationId,\n        properties: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseProperties).call(this, properties, promises)\n    };\n    const relationshipType = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'relationshipTypes', relationshipTypeId);\n    if (relationshipType instanceof Promise) {\n        promises.push(relationshipType.then(value => edge.relationshipType = value));\n    }\n    else {\n        edge.relationshipType = relationshipType;\n    }\n    return edge;\n}, _Graph_parseNode = function _Graph_parseNode([id, labelIds, properties], promises) {\n    const labels = new Array(labelIds.length);\n    for (let i = 0; i < labelIds.length; i++) {\n        const value = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'labels', labelIds[i]);\n        if (value instanceof Promise) {\n            promises.push(value.then(value => labels[i] = value));\n        }\n        else {\n            labels[i] = value;\n        }\n    }\n    return {\n        id,\n        labels,\n        properties: __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseProperties).call(this, properties, promises)\n    };\n}, _Graph_parseProperties = function _Graph_parseProperties(raw, promises) {\n    const parsed = {};\n    for (const [id, type, value] of raw) {\n        const parsedValue = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_parseValue).call(this, [type, value], promises), key = __classPrivateFieldGet(this, _Graph_instances, \"m\", _Graph_getMetadata).call(this, 'propertyKeys', id);\n        if (key instanceof Promise) {\n            promises.push(key.then(key => parsed[key] = parsedValue));\n        }\n        else {\n            parsed[key] = parsedValue;\n        }\n    }\n    return parsed;\n};\nexports.default = Graph;\n"},"lineCount":174}},"error":null,"hash":"a62b4cc9fd5b1c4d7ce54d3d112daa96","cacheData":{"env":{}}}